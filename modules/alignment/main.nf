process index_bowtie2 {
    /*
    * This process indexes the reference genome using Bowtie2. The index files are stored in the
    * specified output directory.
    */
    publishDir "${params.output_dir}/bowtie2_index/${sample_name}", mode: 'copy'
    
    input:
    path reference_genome
    val sample_name

    output:
    path "*.bt2*", emit: bowtie2_index_files
    path reference_genome , emit: reference_genome
    val sample_name, emit: sample_name

    script:
    """
    bowtie2-build --threads ${task.cpus} ${reference_genome} ${reference_genome}
    """
}


process align_bowtie2 {
    /*
    * This process aligns the input FASTQ files to the reference genome using Bowtie2. The output
    * is a BAM file containing the aligned reads.
    */
    publishDir "${params.output_dir}/bowtie2_alignment/${sample_name}", mode: 'copy'
    input:
    val sample_name
    path reference_genome
    path reads
    path reference_genome_index_files
    output:
    path "${sample_name}_bowtie2.sam", emit: bowtie2_sam
    val paired ,emit: paired
    val sample_name, emit: sample_name
    path reads, emit: reads
    script:
    if (reads.size() == 2) {
        paired=true
        """
        bowtie2 \\
            -x ${reference_genome} \\
            -1 ${reads[0]} \\
            -2 ${reads[1]} \\
            -S ${sample_name}_bowtie2.sam \\
            --threads ${task.cpus} \\
        """
        
    }
    else {
        paired=false
        """
        bowtie2 \\
            -x ${reference_genome} \\
            -U ${reads[0]} \\
            -S ${sample_name}_bowtie2.sam \\
            --threads ${task.cpus} \\
        """
    }
}

process convert_sam_to_bam {
    /*
    * This process converts the SAM file generated by Bowtie2 to a BAM file using Samtools. The
    * output is a sorted BAM file.
    */
    publishDir "${params.output_dir}/samtools_conversion/${sample_name}", mode: 'copy'
    input:
    path sam_file
    val sample_name
    output:
    path "${sam_file.baseName}.sorted.bam", emit: sorted_bam
    val sample_name, emit: sample_name
    script:
    """
    samtools view -bS ${sam_file} > ${sam_file.baseName}.bam
    """
}

process sort_bam {
    /*
    * This process sorts the BAM file using Samtools. The output is a sorted BAM file.
    */
    publishDir "${params.output_dir}/samtools_sort/${sample_name}", mode: 'copy'
    input:
    path bam_file
    val sample_name
    output:
    path "${bam_file.baseName}.sorted.bam", emit: sorted_bam
    val sample_name, emit: sample_name
    script:
    """
    samtools sort ${bam_file} -o ${bam_file.baseName}.sorted.bam
    """
}

process convert_sam_to_sorted_bam {
    /*
    * This process converts the SAM file generated by Bowtie2 to a sorted BAM file using Samtools.
    * The output is a sorted BAM file.
    */
    publishDir "${params.output_dir}/samtools_conversion/${sample_name}", mode: 'copy'
    input:
    path sam_file
    val sample_name
    val paired
    output:
    path "${sam_file.baseName}.sorted.bam", emit: sorted_bam
    val sample_name, emit: sample_name
    val paired, emit: paired
    script:
    """
    samtools view -bS ${sam_file} | samtools sort -o ${sam_file.baseName}.sorted.bam
    """
}


process bowtie2_to_sorted_bam{
    /*
    Aligns reads to a reference genome using Bowtie2 but instead of outputting a SAM file, it directly
    converts the output to a sorted BAM file using Samtools. This is useful for large datasets where
    */
    input:
    val sample_name
    path reference_genome
    path reads
    path reference_genome_index_files
    val keep_unmapped
    output:
    path "${sample_name}.${reference_genome.baseName}.sorted.bam", emit: sorted_bam
    val sample_name, emit: sample_name
    val paired, emit: paired
    script:
    def samtools_view_flags = keep_unmapped ? "-bS" : "-bS -F 4"
    if (reads.size() == 2) {
        paired=true
        """
        bowtie2 \\
            -x ${reference_genome} \\
            -1 ${reads[0]} \\
            -2 ${reads[1]} \\
            --threads ${task.cpus} \\
            | samtools view ${samtools_view_flags} - | samtools sort -o ${sample_name}.${reference_genome.baseName}.sorted.bam
        """
        
    }
    else {
        paired=false
        """
        bowtie2 \\
            -x ${reference_genome} \\
            -U ${reads[0]} \\
            --threads ${task.cpus} \\
            | samtools view ${samtools_view_flags} - | samtools sort -o ${sample_name}.${reference_genome.baseName}.sorted.bam
        """

    }

}


process get_unmapped_reads {
    /*
    * This process extracts unmapped reads from the BAM file using Samtools. The output is a FASTQ
    * file containing the unmapped reads.
    */
    publishDir "${params.output_dir}/samtools_unmapped/${sample_name}", mode: 'copy'
    input:
    path bam_file
    val paired
    val sample_name
    output:
    path "${bam_file.baseName}.unmapped*fastq", emit: unmapped_reads
    val sample_name, emit: sample_name
    val paired, emit: paired
    script:
    if (paired) {
        """
        samtools view -b -f 12 -F 256 ${bam_file} | \
            samtools fastq -1 ${bam_file.baseName}.unmapped_1.fastq -2 ${bam_file.baseName}.unmapped_2.fastq
        """
    }
    else {
        """
        samtools view -b -f 4 ${bam_file} | \
            samtools fastq -f 4 > ${bam_file.baseName}.unmapped.fastq
        """
    }
}

process  get_mapped_reads{
    /*
    * This process extracts mapped reads from the BAM file using Samtools. The output is a FASTQ
    * file containing the mapped reads.
    */
    publishDir "${params.output_dir}/samtools_mapped/${sample_name}", mode: 'copy'
    input:
    path bam_file
    val paired
    val sample_name
    output:
    tuple path("${bam_file.baseName}.mapped_1.fastq"), path("${bam_file.baseName}.mapped_2.fastq"), emit: mapped_fastq_1_2, optional: true
    path "${bam_file.baseName}.mapped.fastq", emit: mapped_fastq,optional: true
    val sample_name, emit: sample_name
    script:
    if (paired) {
        """
        samtools view -b -f 3 ${bam_file} | \
            samtools fastq -1 ${bam_file.baseName}.mapped_1.fastq -2 ${bam_file.baseName}.mapped_2.fastq
        """
    }
    else {
        """
        samtools view -b -F 4 ${bam_file} | \
            samtools fastq -1 ${bam_file.baseName}.mapped.fastq
        """
    }
}

process map_reads_fasta_pairs{
    /*
    * This process lumps indexing and mapping of reads to a genome. It  is useful for when we have read-genome pairs.
    */
    publishDir "${params.output_dir}/bowtie2_alignment/${sample_name}_${reference_fasta.baseName}", mode: 'copy', pattern: "*sorted.bam"
    input:
    val sample_name
    path reads
    path reference_fasta
    val paired
    output:
    path reads, emit: reads
    path reference_fasta, emit: reference_fasta
    path "${sample_name}_${reference_fasta.baseName}.sorted.bam", emit: sorted_bam
    val sample_name, emit: sample_name
    val paired, emit: paired

    script:
    if (paired) {
        """
        bowtie2-build --threads ${task.cpus} ${reference_fasta} ${reference_fasta}
        bowtie2 \\
            -x ${reference_fasta} \\
            -1 ${reads[0]} \\
        -2 ${reads[1]} \\
        --threads ${task.cpus} | samtools view -bS - | samtools sort -o ${sample_name}_${reference_fasta.baseName}.sorted.bam
    """}
    else {
        """
        bowtie2-build --threads ${task.cpus} ${reference_fasta} ${reference_fasta}
        bowtie2 \\
            -x ${reference_fasta} \\
            -U ${reads[0]} \\
            --threads ${task.cpus} | samtools view -bS - | samtools sort -o ${sample_name}_${reference_fasta.baseName}.sorted.bam
        """
    }

}

process index_star {
    /*
    * This process indexes the reference genome using STAR. The index files are stored in the
    * specified output directory.
    */
    publishDir "${params.output_dir}/star_index", mode: 'link'
    
    input:
    path reference_genome
    path reference_genome_gtf

    output:
    path "indexfiles/*", emit: star_index_files

    script:
    """
    STAR --runThreadN ${task.cpus} --runMode genomeGenerate --genomeDir indexfiles --genomeFastaFiles ${reference_genome} --sjdbGTFfile ${reference_genome_gtf}
    """
}

process align_star {
    /*
    * This process aligns the input FASTQ files to the reference genome using STAR. The output
    * is a BAM file containing the aligned reads.
    */
    publishDir "${params.output_dir}/star_alignment/${sample_name}", mode: 'copy'
    
    input:
    val sample_name
    path index_files
    path reads

    output:
    path "${sample_name}_Aligned.sortedByCoord.out.bam", emit: star_aligned_bam
    val sample_name, emit: sample_name

    script:
    """
    STAR --runMode alignReads --genomeDir . --readFilesIn ${reads} --readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --outFileNamePrefix "${sample_name}_" --runThreadN ${task.cpus}
    """
}

process index_kallisto{
    /*
    * This process indexes the reference transcriptome using Kallisto. The index files are stored in the
    * specified output directory.
    */
    publishDir "${params.output_dir}/kallisto_index", mode: 'link'
    input:
    path genome_sequence
    path annotation_gtf

    output:
    path "index.idx", emit: index_file
    path "t2g.txt", emit: t2g_file

    script:
    """
    kb ref -i index.idx -g t2g.txt ${genome_sequence}  ${annotation_gtf}
"""

}

process map_reads_kallisto_single_cell {
    /*
    * This process maps the input FASTQ files to the reference transcriptome using Kallisto. The output
    * is a BAM file containing the aligned reads.
    */
    publishDir "${params.output_dir}/kallisto_alignment/${sample_name}", mode: 'copy'

    input:
    val sample_name
    path index_file
    path t2g_file
    path reads

    output:
    path "${sample_name}/filtered_feature_bc_matrix.h5ad", emit: h5ad_file
    val sample_name, emit: sample_name

    script:
    """
    kb count -i ${index_file} -g ${t2g_file} -x 10xv2 -o ${sample_name} --h5ad ${reads}
    """
}

process map_contigs_to_reference_transcriptome{
    /*
    * This process maps the input FASTQ files to the reference transcriptome using Kallisto. The output
    * is a BAM file containing the aligned reads.
    */
    publishDir "${params.output_dir}/minimap_transcriptome_alignment/", mode: 'link'

    input:
    path contigs
    path transcriptome_fasta

    output:
    path "mapped_contigs.fasta", emit: mapped_contigs
    path "unmapped_contigs.fasta", emit: unmapped_contigs

    script:
    """
    cat ${contigs.join(" ")} > all_contigs.fasta
    minimap2 -ax asm10 ${transcriptome_fasta} all_contigs.fasta | samtools view -bS - | samtools sort -o aln.sorted.bam
    samtools view -bS -f 4 aln.sorted.bam |samtools fasta - > unmapped_contigs.fasta
    samtools view -bS -F 4 aln.sorted.bam | samtools fasta - > mapped_contigs.fasta
    """
}