process index_bowtie2 {
    /*
    * This process indexes the reference genome using Bowtie2. The index files are stored in the
    * specified output directory.
    */
    publishDir "${params.output_dir}/bowtie2_index"
    input:
    path reference_genome
    output:
    path "*.bt2" , emit: bowtie2_index_files
    path reference_genome , emit: reference_genome
    script:
    """
    bowtie2-build --threads ${task.cpus} ${reference_genome} ${reference_genome}
    """
}

process align_bowtie2 {
    /*
    * This process aligns the input FASTQ files to the reference genome using Bowtie2. The output
    * is a BAM file containing the aligned reads.
    */
    publishDir "${params.output_dir}/bowtie2_alignment"
    input:
    val sample_name
    path reference_genome
    path reads
    path reference_genome_index_files
    output:
    path "${sample_name}_bowtie2.sam", emit: bowtie2_sam
    val paired ,emit: paired
    script:
    if (reads.size() == 2) {
        paired=true
        """
        bowtie2 \\
            -x ${reference_genome} \\
            -1 ${reads[0]} \\
            -2 ${reads[1]} \\
            -S ${sample_name}_bowtie2.sam \\
            --threads ${task.cpus} \\
        """
        
    }
    else {
        paired=false
        """
        bowtie2 \\
            -x ${reference_genome} \\
            -U ${reads[0]} \\
            -S ${sample_name}_bowtie2.sam \\
            --threads ${task.cpus} \\
        """
    }
}

process convert_sam_to_bam {
    /*
    * This process converts the SAM file generated by Bowtie2 to a BAM file using Samtools. The
    * output is a sorted BAM file.
    */
    publishDir "${params.output_dir}/samtools_conversion"
    input:
    path sam_file
    output:
    path "${sam_file.baseName}.sorted.bam", emit: sorted_bam
    script:
    """
    samtools view -bS ${sam_file} > ${sam_file.baseName}.bam
    """
}

process sort_bam {
    /*
    * This process sorts the BAM file using Samtools. The output is a sorted BAM file.
    */
    publishDir "${params.output_dir}/samtools_sort"
    input:
    path bam_file
    output:
    path "${bam_file.baseName}.sorted.bam", emit: sorted_bam
    script:
    """
    samtools sort ${bam_file} -o ${bam_file.baseName}.sorted.bam
    """
}

process convert_sam_to_sorted_bam {
    /*
    * This process converts the SAM file generated by Bowtie2 to a sorted BAM file using Samtools.
    * The output is a sorted BAM file.
    */
    publishDir "${params.output_dir}/samtools_conversion"
    input:
    path sam_file
    output:
    path "${sam_file.baseName}.sorted.bam", emit: sorted_bam
    script:
    """
    samtools view -bS ${sam_file} | samtools sort -o ${sam_file.baseName}.sorted.bam
    """
}

process get_unmapped_reads {
    /*
    * This process extracts unmapped reads from the BAM file using Samtools. The output is a FASTQ
    * file containing the unmapped reads.
    */
    publishDir "${params.output_dir}/samtools_unmapped"
    input:
    path bam_file
    val paired
    output:
    path "${bam_file.baseName}.unmapped*fastq", emit: unmapped_reads
    script:
    if (paired) {
        """
        samtools view -b -f 12 -F 256 ${bam_file} | \
            samtools fastq -1 ${bam_file.baseName}.unmapped_1.fastq -2 ${bam_file.baseName}.unmapped_2.fastq
        """
    }
    else {
        """
        samtools view -b -f 4 ${bam_file} | \
            samtools fastq -f 4 > ${bam_file.baseName}.unmapped.fastq
        """
    }
}

process  get_mapped_reads{
    /*
    * This process extracts mapped reads from the BAM file using Samtools. The output is a FASTQ
    * file containing the mapped reads.
    */
    publishDir "${params.output_dir}/samtools_mapped"
    input:
    path bam_file
    val paired
    output:
    tuple path("${bam_file.baseName}.mapped_1.fastq"), path("${bam_file.baseName}.mapped_2.fastq"), emit: mapped_fastq_1_2, optional: true
    path "${bam_file.baseName}.mapped.fastq", emit: mapped_fastq,optional: true
    script:
    if (paired) {
        """
        samtools view -b -f 3 ${bam_file} | \
            samtools fastq -1 ${bam_file.baseName}.mapped_1.fastq -2 ${bam_file.baseName}.mapped_2.fastq
        """
    }
    else {
        """
        samtools view -b -F 4 ${bam_file} | \
            samtools fastq -1 ${bam_file.baseName}.mapped.fastq
        """
    }
}